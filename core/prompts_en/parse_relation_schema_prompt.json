{
  "id": "parse_relation_schema_prompt",
  "category": "regular_function",
  "name": "Context-Driven Relationship Schema Generation (Chain-of-Thought Constrained Version)",
  "description": "Design an appropriate relationship schema based on background information and the entity schema. The model may reason step-by-step internally, but must output JSON only.",
  "template": "Read the insight text and the 【Background】, then, based on the current 【Entity Schema】, generate a **relationship schema**. You may reason internally (identify common interactions, infer directionality and participant types, dedupe synonyms, choose concise snake_case names), but **do not reveal any reasoning**—only output the final JSON.\n\n【Design Requirements】\n- Output exactly one JSON with a single top-level key: `relations`.\n- The value of `relations` must be an **object**; under it, **group keys** are determined by you (e.g., role_interactions, event_actions, spatiotemporal, semantics). Names must be short and clear; include at least one group.\n- Each group contains several relation entries. Each entry must include:\n  - `type`: English snake_case (e.g., participates_in, occurs_at, allies_with).\n  - `description`: a short English sentence; end with parentheses that specify **participant types and direction**, where type names **must come from** the `type` fields in the 【Entity Schema】. Examples of the parenthetical suffix: `(Character ↔ Character)`, `(Character / Object → Event)`.\n- Directionality convention: `→` = directed; `↔` = symmetric. Only use `Any` as a wildcard when it truly applies to **all** entity types; otherwise enumerate specific types and use `A / B` for alternatives.\n- Define **relationship types only** (no attributes). Avoid redundant synonyms and over-specialization. Prioritize common interactions.\n- The **total number of relation types** must not exceed **20**.\n\n【Minimal Example (illustrative only; do not copy; your type names must come from the input Entity Schema)】\n```json\n{{\n  \"relations\": {{\n    \"core_interactions\": [\n      {{ \"type\": \"participates_in\", \"description\": \"A character participates in an event (Character → Event)\" }},\n      {{ \"type\": \"has_action\", \"description\": \"An event contains an action step (Event → Action)\" }}\n    ],\n    \"spatiotemporal\": [\n      {{ \"type\": \"occurs_at\", \"description\": \"An event/action occurs at a location (Event / Action → Location)\" }},\n      {{ \"type\": \"occurs_on\", \"description\": \"An event/action occurs at a time point (Event / Action → TimePoint)\" }}\n    ],\n    \"affiliation_conflict\": [\n      {{ \"type\": \"affiliated_with\", \"description\": \"An individual/unit is affiliated with an organization or faction (Character / Object → Concept)\" }},\n      {{ \"type\": \"conflicts_with\", \"description\": \"Two parties are in opposition (Character / Concept ↔ Character / Concept)\" }}\n    ]\n  }}\n}}\n```\n\n【Background】\n{current_background}\n\n【Entity Schema】\n{entity_schema}\n\n【Output Format (JSON only)】\n```json\n{{\n  \"relations\": {{\n    \"<group_name>\": [ {{ \"type\": \"...\", \"description\": \"... (TypeA → TypeB)\" }} ]\n  }}\n}}\n```",
  "variables": [
    {
      "name": "current_background",
      "description": "Current background information."
    },
    {
      "name": "entity_schema",
      "description": "Existing entity schema JSON (contains an entities array with type/description/properties)."
    }
  ]
}
