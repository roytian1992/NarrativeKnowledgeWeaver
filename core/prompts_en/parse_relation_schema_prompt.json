{
  "id": "parse_relation_schema_prompt",
  "category": "regular_function",
  "name": "Context-Driven Relationship Schema Generation (Chain-of-Thought Constrained Version)",
  "description": "Design an appropriate relationship schema based on background information and entity schema. Allow the model to think step-by-step internally, but only output JSON in the end. Group keys are determined by the model itself, with the core being secondary relationship entries (type/description).",
  "template": "请阅读洞见文本与【背景信息】，根据当前【实体Schema】并生成一套**关系 Schema**。你可以在内部逐步推理：识别常见交互、归纳方向性与参与类型、去重同义、选择简洁的 snake_case 关系名。但**不要在输出中展示任何思考过程**，只给最终 JSON。\n\n【设计要求】\n- 只输出一个 JSON，顶层**只能**包含 `relations` 键。\n- `relations` 的值为**对象**；其下的**分组键名**由你自行决定（可按角色互动、事件动作、时空、语义等维度命名），名称需简短清晰；至少包含一个分组。\n- 分组内是若干关系条目，每条包含：\n  - `type`：英文 snake_case（如 participates_in、occurs_at、allies_with）。\n  - `description`：中文短句；句尾用括号标明**参与类型与方向**，类型名必须来自【实体Schema】中的 `type`；格式示例：`（Character ↔ Character）`、`（Character / Object → Event）`。\n- 方向性约定：`→` 表示有向；`↔` 表示对称。只有在确实适用于**所有**实体类型时才使用 `Any` 作为通配，否则尽量列出具体类型，用 `A / B` 表示并列。\n- 只设计关系类型，不设计属性；避免同义冗余与过度专业化；优先覆盖常见的交互方式。\n- 关系类型的总数不可以超过20个。。\n\n【Minimal Example（示意，勿照抄；你的类型名应来自输入的实体Schema）】\n```json\n{{\n  \"relations\": {{\n    \"core_interactions\": [\n      {{ \"type\": \"participates_in\", \"description\": \"角色参与事件（Character → Event）\" }}\n      {{ \"type\": \"has_action\", \"description\": \"事件包含动作步骤（Event → Action）\" }}\n    ],\n    \"spatiotemporal\": [\n      {{ \"type\": \"occurs_at\", \"description\": \"事件/动作发生在某地（Event / Action → Location）\" }}\n      {{ \"type\": \"occurs_on\", \"description\": \"事件/动作发生在某时间（Event / Action → TimePoint）\" }}\n    ],\n    \"affiliation_conflict\": [\n      {{ \"type\": \"affiliated_with\", \"description\": \"个体/单位隶属于组织或阵营（Character / Object → Concept）\" }}\n      {{ \"type\": \"conflicts_with\", \"description\": \"两方存在对立/敌对关系（Character / Concept ↔ Character / Concept）\" }}\n    ]\n  }}\n}}\n```\n\n【当前的背景信息】\n{current_background}\n\n【实体Schema】\n{entity_schema}\n\n【输出格式（仅此 JSON）】\n```json\n{{\n  \"relations\": {{\n    \"<group_name>\": [ {{ \"type\": \"...\", \"description\": \"...（TypeA → TypeB）\" }} ]\n  }}\n}}\n```",
  "variables": [
    {
      "name": "current_background",
      "description": "Current background information."
    },
    {
      "name": "entity_schema",
      "description": "Existing entity schema JSON (only contains entities array; type/description/properties)"
    }
  ]
}
